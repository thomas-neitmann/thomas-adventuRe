---
title: 'Capire la Non-Standard Evaluation. Parte Prima: Le Basi'
author: Thomas Neitmann
date: '2021-01-27'
slug: capire-la-nse-parte1
categories:
  - R
  - article
tags: []
toc: no
images: ~
---

<!-- Non-standard evaluation---or NSE for short---is one of those technical terms R wizards like to throw around in discussions about the language. But what exactly does NSE mean? To answer that question and demystify the concept, I will first talk about its opposite, i.e. *standard* evaluation (no, it's not called non-NSE üòâ). -->

La *non-standard evaluation* (letteralmente *valutazione non-standard*)---abbreviata in NSE---√® uno di quei termini tecnici che i maghi di R adorano sventolare nelle discussioni sul linguaggio di programmazione. Ma cosa significa esattamente NSE? Per rispondere a questa domanda e demistificare il concetto, bisogna cominciare a parlare del suo opposto, ovvero la *standard evaluation* (no, non si chiama non-NSE üòâ).

<!-- Let's take the example of selecting a single column from a data frame. In base R you can do that using either `[[` or `$`. The former uses standard evaluation semantics whereas the latter uses NSE. -->

Prendiamo per esempio il selezionare una singola colonna da un data frame. In R base lo si pu√≤ fare sia usando `[[` sia con `$`. Il primo usa la semantica della *standard evaluation*, il secondo usa la NSE.

<!-- When using `[[` you have to pass a string inside the brackets. In the most simple case you use a string *literal*.-->

Quando si usa `[[`, bisogna *passare* una stringa tra le parentesi. Nel caso pi√π semplice si usa una stringa *letterale*.

```{r}
data(iris)
head(iris[["Species"]])
```

<!-- But you can also pass a *symbol* inside `[[`. This symbol will be *evaluated* to a *value* (which better be a string or number otherwise you'll get an error).-->

Ma √® anche possibile passare un *simbolo* all'interno di `[[`. Questo simbolo verr√† *valutato* ad un *valore* (che far√† meglio ad essere una stringa o un numero, altrimenti dar√† un errore).

```{r}
var <- "Species"
head(iris[[var]])
```

<!--No surprise so far. Next, let's take a look at the behavior of `$`. Just like `[[` you can pass a string literal to `$`.-->

Nessuna sorpresa fino a qui. Ora vediamo come si comporta `$`. Proprio come con `[[`, puoi passare una stringa letterale a `$`.

```{r}
head(iris$"Species")
```

<!--However, you'll likely never do that in practice because with `$` you don't have to. Instead, you can pass a symbol on the right-hand side of `$`.-->

Tuttavia, difficilmente lo si fa nella pratica perch√® con `$` non √® necessario. Piuttosto puoi mettere un simbolo nel lato destro di `$`.

```{r}
head(iris$Species)
```

<!--This is very convenient when you are writing code interactively in the console as it requires two less keystrokes. Now what happens if we pass `var` defined above on the right-hand side of `$`?-->

Tutto ci√≤ √® molto comodo quando scrivi il codice direttamente nella console perch√® richiede meno battute sulla tastiera. Ora, cosa succede se passiamo `var`, che abbiamo definito poco fa, nel lato destro di `$`?

```{r}
head(iris$var)
```

<!--Didn't expect that? You are not alone! This is the point where I see lots of beginning R programmers struggle. Remember, the symbol `var` holds the value `"Species"`. Using standard evaluation semantics R would evaluate `var` to its value. However, when using `$` that's *not* the case because `$` uses NSE. Instead, `$` looks for a column named `var` inside the `iris` data frame. Since there is no such column, you get `NULL` as result (I'd prefer an error but that's just the way things are).-->

Non √® quello che ti aspettavi? Non sei il solo! Questo √® il momento in cui noto molti programmatori di R alle prime armi avere delle difficolt√†. Ricorda, il *simbolo* `var` contiene il valore `"Species"`. Usando la valutazione standard, R *valuterebbe* `var` al suo valore. Tuttavia quando si usa `$` questo non succede, poich√® `$` usa la *NSE*. Invece `$` cerca una colonna con il nome `var` all'interno del data frame `iris`. Dal momento che questa colonna non esiste, si ottiene `NULL` come risultato (personalmente preferirei un errore, ma le cose stanno cos√¨).

<!--Apart from `Species`, the `iris` data frame also contains a column named `Sepal.Length`. Based upon what we discussed so far, you can select that column either using `iris[["Sepal.Length"]]` or `iris$Sepal.Length`. But what happens if there's a variable called `Sepal.Length` in the global environment?-->

Oltre a `Species`, il data frame `iris` contiene anche una colonna chiamata `Sepal.Length`. In base a quanto abbiamo appena detto, si pu√≤ selezionare quella colonna sia usando `iris[["Sepal.Length"]]` sia usando `iris$Sepal.Length`. Ma cosa succede quando abbiamo una variabile chiamata `Sepal.Length` nel *global environment*?

```{r}
Sepal.Length <- "Species"
```

<!--What will `iris[[Sepal.Length]]` and `iris$Sepal.Length` return, respectively? Before you read on, **pause** and think about it. With what we've covered so far you should be able to answer that question correctly. If you are still unsure, head back to the top and read the preceding paragraphs once again.-->

Che cosa restituiranno rispettivamente `iris[[Sepal.Length]]` e `iris$Sepal.Length`? Prima di proseguire con la lettura, **fermati** e pensaci. In base a quanto abbiamo detto finora, dovresti essere in grado di rispondere correttamente a quella domanda. Se sei nel dubbio, torna indietro e leggi un'altra volta i paragrafi precedenti.

<!--Let's start with `iris[[Sepal.Length]]`. When using `[[` the symbol `Sepal.Length` is evaluated to its value `"Species"`. Thus, in this case `iris[[Sepal.Length]]` is the same as `iris[["Species"]]`.-->

Cominciamo da `iris[[Sepal.Length]]`. Quando usiamo `[[` il *simbolo* `Sepal.Length` viene *valutato* al suo valore `"Species"`. Quindi in questo caso `iris[[Sepal.Length]]` equivale a `iris[["Species"]]`.

```{r}
head(iris[[Sepal.Length]])
```

<!--On the other hand when using `iris$Sepal.Length`, R simply doesn't care if there exists a variable named `Sepal.Length` in the global environment. Instead, the very first thing it does, is to look for a variable named `Sepal.Length` inside the `iris` data frame and sure enough there is one.-->

Al contrario quando si usa `iris$Sepal.Length`, a R non interessa dell'esistenza di una variabile chiamata `Sepal.Length` nel *global environment*. Invece, la prima cosa che fa √® cercare una variabile chiamata `Sepal.Length` all'interno del data frame `iris`, e infatti ne trova una.

```{r}
head(iris$Sepal.Length)
```

<!--So, even though you call `iris$Sepal.Length` in the global environment and in the very same environment there's a symbol named `Sepal.Length` bound to a value, R just bypasses that. Instead, it treats the data frame *itself* as an environment and if you evaluate `Sepal.Length` there you get back the contents of that column. Now that does not follow R's standard evaluation semantics at all which is why this process is called non-standard evaluation.-->

Quindi, anche se esegui il comando `iris$Sepal.Length` nel *global environment*, e in quello stesso *ambiente* esiste un *simbolo* con il nome `Sepal.Length` associato ad un valore, R lo ignora. Tratta invece il data frame *stesso* come se fosse un *ambiente*, e se valuti l√¨ `Sepal.Length`, ottieni il contenuto di quella colonna. Questo non segue per nulla le regole di R sulla *valutazione standard*, dunque questo processo prende il nome di *valutazione non-standard*.

<!--If you understood what we've covered so far, you just made a big step forward on your journey towards mastering R. But wait, there's more to come! In part 2 of this post I will show you how to implement a NSE function yourself. By doing that you'll deepen your understanding even further and will learn about some of R's internals that give you the super power to write packages such as {dplyr}. Stay tuned!.-->

Se hai capito quello che abbiamo visto finora, hai appena fatto un grande passo in avanti nel tuo viaggio per padroneggiare R. Ma aspetta, non √® finita! Nella seconda parte di questo post ti mostrer√≤ come implementare a tua volta una funzione che usa la NSE. Cos√¨ facendo approfondirai ancora di pi√π la tua comprensione e imparerai alcuni meccanismi interni di R che ti daranno il super potere di scrivere pacchetti come {dplyr}. Rimani sintonizzato!

*<small>Questo post √® stato tradotto dall'inglese da [Stefano Anzani](https://github.com/stefanoanzani).</small>*
